@page "/collectionPage"
@using BlazorInputFile
@using System.IO
@using System.Reflection.Metadata
@using DataClasses.Domain.Collections
@using DataClasses.Domain.Picture
@using PW_BusinessLogicLayer.Interfaces

<link href="css/CSSStyles.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">

@inject Collection CollectionInfo
@inject LocationOnBody Location
@inject PictureInfo Picture
@inject PictureComment PicComment
@inject ChangeCollectionMarking ChangeCollectionMarking
@inject ChangeCollectionName ChangeCollectionName
@inject ChangeNotifications ChangeNotifications
@inject IDeleteCollectionController DeleteCollectionController
@inject IMarkCollectionController MarkCollectionController
@inject IChangeComment ChangeComment
@inject IChangeCollectionNameController ChangeCollectionNameController
@inject IChangeFollowUpNotificationsController ChangeFollowUpNotificationsController
@inject NavigationManager NavManager



<div class="row">

    <div class="col">
        <input style="width: 45%; height: 45%; margin-left: 35%; font-size: 24pt" disabled="@IsDisabled" type="text" @oninput="OnInputHandler" placeholder="@CollectionInfo.CollectionName" class="form-control"/>

        <button class="iconfields" @onclick="EditName">
            <i class="@EditIcon"></i>
        </button>

    </div>


    <div class="col" style="float: right">
        <button class="fa fa-ellipsis-h ellipsisSideBar iconfields" @onclick="Sidebar"></button> @*onclick="Sidebar"*@
        @*Denne skal flyve ind fra siden over det eksisterende på siden*@
        @if (SidebarVisible) //class="td"
        {
            <div id="mySidenav" class="sidenav">
                <button class="fas fa-arrow-right closebtn" @onclick="CloseSideNav"></button>
                <h2 style="color: azure">Indstillinger</h2>
                <div style="color: azure; margin-left: 5%; margin-bottom: 4%; cursor: pointer" @onclick="ItemMarked">
                    <span class="@Flag" style="transform: scaleX(-1);color:@FlagColor"></span>
                    Markér samling
                </div>

                <div style="color: azure; margin-left: 5%; margin-bottom: 4%; cursor: pointer" @onclick="DeleteDialogShow">
                    <span class="fa fa-trash-o"></span>
                    Slet samling
                </div>

                @if (DeleteCollectionBool)
                {
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <p class="modal-title" id="titleLabel">Ønsker du at slette denne samling?</p>
                            </div>
                            <div class="modal-body">
                                <button class="iconfieldsWithText" style="margin-right: 1%" @onclick="DeleteCollection">
                                    <i class="fa fa-check" style="color:forestgreen"></i>
                                    Ja
                                </button>
                                <button class="iconfieldsWithText" @onclick="DeleteDialogShow">
                                    <i class="fa fa-close" style="color:red"></i>
                                    Nej
                                </button>
                            </div>
                        </div>
                    </div>
                }
                <div class="dropdown-toggle" style="color: azure; margin-left: 5%; cursor: pointer" @onclick="Notifications">
                    <span class="fa fa-clock-o"></span>
                    Ændr follow-up notifikationer
                </div>
                @if (NotificationVisible)
                {
                    <div style="color: azure; width: 50%; margin-left: 5%; margin-bottom: 5%">
                        <label>Dag: </label>
                        <select class="form-control" @onchange="DaysChanged">
                            <option value="">@_dayOption</option>
                            @foreach (var day in weekdaysList)
                            {
                                <option value="@day">@day</option>
                            }
                        </select>
                    </div>


                    <div style="color: azure; width: 35%; margin-left: 5%; margin-bottom: 5%">
                        <label>Klokken: </label>
                        <select class="form-control" @onchange="HourChanged">
                            <option>@_hourOption</option>
                            @foreach (var hour in hoursList)
                            {
                                <option value="@hour">@hour.00</option>
                            }
                        </select>
                    </div>


                    <div style="color: azure; width: 40%; margin-left: 5%; margin-bottom: 5%">
                        <label>Antal uger: </label>
                        <select class="form-control" @onchange="WeeksChanged">
                            <option>@_weekOption</option>
                            @foreach (var week in weeksList)
                            {
                                <option value="@week">Hver @week. uge</option>
                            }
                        </select>
                    </div>

                    <div>
                        <button class="btn btn-primary rounded-pill" style="margin-left: 5%" @onclick="OnChangedNotifications">Gem</button>
                    </div>
                }
            </div>
        }
    </div>
</div>

<div class="row">
    <div class="col" style="float: left; border: solid;width:300px;height:300px">
        <div>
            @*@if (ShowUploadedMolePicture == true)
                {*@
            <img src="Images/@imageDataUrl" style="height:260px" />
        </div>
        <div class="float-container">
            <div class="float-child" style="width:70%">
                <InputFile OnChange="HandleSelection" />
            </div>
            @if (imageDataUrl.Contains("."))
            {
                <div class="float-child" style="width: 14%;margin-right:1%">
                    <button class="btn btn-danger rounded-pill" @onclick="DeletePicture" style="font-size:10px">
                        <i class="fa fa-trash-o"></i>
                        Slet
                    </button>
                </div>

                <div class="float-child" style="width: 15%">
                    <button class="btn btn-primary rounded-pill" @onclick="ShowUploadedMole" style="border-radius: 1%; float: right; font-size: 10px">
                        <i class="@AddPictureButton"></i>
                        Gem
                    </button>
                </div>
            }
        </div>
    </div>

    <div>
        <button class="iconfieldsWithText">
            <i class="fas fa-exchange-alt"></i>
            Sammenlign
        </button>
    </div>

    <div class="col">

        <div class="col" style="overflow: scroll; overflow-x: hidden; height: 100%; width: 60%; float: right">

            <table class="table table-striped table-bordered">
                <thead>
                    <tr>
                        <th>Modermærker for denne samling</th>
                    </tr>
                </thead>
                <tbody style="cursor: pointer">
                    @foreach (Collection collection in collections)
                    {
                        <tr>
                            <td>@Picture.DateOfUpload</td>
                        </tr>
                    }
                </tbody>
            </table>

        </div>

    </div>
</div>



<div class="row">
    <div class="col">
        <div style="float: left; margin-top: 3%;">
            <textarea class="textarea" style="overflow-y; overflow-x: hidden; max-height: 80%; width: 150%" @bind="PicComment.Comment" placeholder="Indtast noter her..." />
            <button class="btn btn-primary rounded-pill" @onclick="SaveNotes">Gem noter</button>
        </div>
    </div>
</div>





@code {
    //TODO Lav popop med fortryd handling efter man er kommet ind på main page og har slettet en collection
    private List<Collection> collections = new List<Collection>();
    //private IEnumerable<Collection> collections = new[]
    //{
    //    new Collection {CollectionID = 1, CollectionName = "Venstre skulder", Location = new LocationOnBody(), PictureList = new List<PictureInfo>()},
    //    new Collection {CollectionID = 1, CollectionName = "Højre skulder", Location = new LocationOnBody(), PictureList = new List<PictureInfo>()}
    //};

    public bool SaveDisabled { get; set; } = true;
    public string AddPictureButton = "fa fa-picture-o";
    public bool DeleteCollectionBool { get; set; }
    public string EditIcon { get; set; } = "fa fa-pencil";
    public bool ChangeNameBool { get; set; }
    public bool IsDisabled { get; set; } = true;
    public string FontColor { get; set; }
    public string FlagColor = "azure";

    private void EditName()
    {
        if (!ChangeNameBool)
        {
            EditIcon = "fa fa-floppy-o";
            IsDisabled = false;
        }
        else
        {
            EditIcon = "fa fa-pencil";
            ChangeCollectionNameController.HandleChangedName(ChangeCollectionName);
            IsDisabled = true;
        }
        ChangeNameBool = !ChangeNameBool;
    }

    private void OnInputHandler(ChangeEventArgs e)
    {
        CollectionInfo.CollectionName = e.Value.ToString();
    }

    private void SaveNotes()
    {
        //ChangeComment.HandleComment(PicComment); //TODO Skal sættes op når lasse har fikset det
    }

    private void DeletePicture()
    {

    }

    public void CloseSideNav()
    {
        SidebarVisible = !SidebarVisible;
    }

    #region Sidebar

    public bool SidebarVisible { get; set; }

    private void Sidebar()
    {
        SidebarVisible = !SidebarVisible;
    }

    #region Flag

    public string Flag = "fa fa-flag-o";

    public void ItemMarked()
    {
        if (Flag == "fa fa-flag-o")
        {
            Flag = "fa fa-flag-checkered";
            FlagColor = "red";
            ChangeCollectionMarking.IsMarked = true;
            MarkCollectionController.HandleMarking(ChangeCollectionMarking);
        }
        else
        {
            Flag = "fa fa-flag-o";
            FlagColor = "azure";
            ChangeCollectionMarking.IsMarked = false;
            MarkCollectionController.HandleMarking(ChangeCollectionMarking);
        }
    }

    #endregion

    #region DeleteCollection

    public void DeleteDialogShow()
    {
        //SidebarVisible = !SidebarVisible;
        DeleteCollectionBool = !DeleteCollectionBool;
    }

    public void DeleteCollection()
    {
        DeleteCollectionController.DeleteCollection();
        NavManager.NavigateTo("/mainPage");
    }

    #endregion

    #region Notifications

    public bool NotificationVisible { get; set; }

    public void Notifications()
    {
        NotificationVisible = !NotificationVisible;
    }

    public bool DaysVisible { get; set; }

    public void Days()
    {
        DaysVisible = !DaysVisible;
    }

    public bool HoursVisible { get; set; }

    public void Hours()
    {
        HoursVisible = !HoursVisible;
    }

    public bool WeeksVisible { get; set; }

    public void Weeks()
    {
        WeeksVisible = !WeeksVisible;
    }

    private string _dayOption { get; set; } = "--Dag--";
    private string _hourOption { get; set; } = "--Time--";
    private string _weekOption { get; set; } = "--Uger--";

    public void DaysChanged(ChangeEventArgs dayEvent)
    {
        _dayOption = dayEvent.Value.ToString();
        ChangeNotifications.WeekDay = _dayOption;
        StateHasChanged();
    }

    public void HourChanged(ChangeEventArgs hourEvent)
    {
        _hourOption = hourEvent.Value.ToString();
        ChangeNotifications.Hour = _hourOption;
        StateHasChanged();
    }

    public void WeeksChanged(ChangeEventArgs weekEvent)
    {
        _weekOption = weekEvent.Value.ToString();
        ChangeNotifications.NumberOfWeeks = _weekOption;
        StateHasChanged();
    }

    public void OnChangedNotifications()
    {
        ChangeFollowUpNotificationsController.HandleChangedNotifications(ChangeNotifications);
    }


    private List<string> weekdaysList = new List<string>(new string[] { "Mandag", "Tirsdag", "Onsdag", "Torsdag", "Fredag", "Lørdag", "Søndag" });
    private List<string> weeksList = new List<string>(new string[] { "1", "2", "4", "6", "8", "12" });
    private List<string> hoursList = new List<string>(new string[] {"00","01","02","03","04","05","06","07", "08", "09", "10", "11", "12", "13",
        "14", "15", "16", "17", "18", "19", "20", "21", "22", "23"});

    #endregion

    #endregion

    string status;

    public string imageDataUrl { get; set; } = "";
    public bool ShowUploadedMolePicture { get; set; }

    private void ShowUploadedMole()
    {
        ShowUploadedMolePicture = !ShowUploadedMolePicture;
    }

    async Task HandleSelection(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file != null)
        {
            var fileType = GetFileType(file.Name);
            if (fileType == "image")
            {
                var ms = new MemoryStream();
                await file.Data.CopyToAsync(ms);
                //string imageBase64Data = Convert.ToBase64String(ms.ToArray());
                //imageDataUrl = string.Format("image/png;base64,{0}", imageBase64Data);
                imageDataUrl = file.Name;

                using (FileStream newFile = new FileStream("wwwroot\\images\\" + file.Name, FileMode.Create, FileAccess.Write))
                {
                    ms.WriteTo(newFile);
                }
            }
        }
        status = $"Finished loading {file.Size} bytes from {file.Name}";

    }

    private string GetFileType(string name)
    {
        string result = "";
        if (name.Contains("jpeg") || name.Contains("jpg") || name.Contains("png") || name.Contains("gif") || name.Contains("jfif"))
        {
            result = "image";
        }

        return result;
    }

    private void PointOnPatientModel()
    {

    }
}
