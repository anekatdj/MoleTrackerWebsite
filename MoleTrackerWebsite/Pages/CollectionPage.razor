@page "/CollectionPage"

@using BusinessLogicLayer
@using BusinessLogicLayer.BusinessLogicLayerInterfaces
@using DataClasses.Domain
@using System.Drawing
@using static System.IO.File
@using System.Diagnostics
@using System.IO
@using System.Reflection.Metadata
@using System.Xml
@using System.Timers

@inject IViewCollectionController ViewCollectionController
@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime;



<div>
    <h3>
        @ChosenCollection.CollectionName
    </h3>
    @if (ChosenCollection.PictureList.Count == 0 || ChosenCollection.PictureList == null)
    {
        <h4 style="color: red">
            Der er endnu ikke uploaded billeder til denne samling.
        </h4>
    }
    <table  class="table" >

        @if (ChosenCollection.PictureList.Count != 0 && ChosenCollection.PictureList != null)
        {
        <div style="overflow-x:scroll">
            <tr>
                @foreach (var info in ChosenCollection.PictureList)
                {

                    <td>
                        <div style="transform: rotate(0deg); width: 20%;padding: 5%">
                            @info.DateOfUpload
                        </div>
                    </td>
                }
            </tr>
            <tr>
                @foreach (var item in PicDataList)
                {

                    <td @onclick="@((e) => ShowPicture(e, item.PictureID))">
                        <img style="width: 100%;" src="data:image;base64,@System.Convert.ToBase64String(@item.PictureData)" />
                    </td>
                }
            </tr>
        </div>


        }

    </table>
</div>
<div>
    <table class="table">
        @if (ChosenCollection.PictureList.Count != 0 && ChosenCollection.PictureList != null)
        {
            <th>@FocusedPicDateOfUpload</th>
            <th>@LatestPicDateOfUpload</th>
        }
        <tr>
            @if (ChosenCollection.PictureList.Count != 0 && ChosenCollection.PictureList != null)
            {
                <td style="width: 50%;">
                    <img style="width: 100%;" src="data:image;base64,@System.Convert.ToBase64String(FocusedPic)" />
                </td>
                <td style="width: 50%">
                    <img style="width: 100%;" src="data:image;base64,@System.Convert.ToBase64String(LatestPic)" />
                </td>
            }
        </tr>
        <tr>
            <td colspan="2">
                <table id="t1" class="table2">
                    <td style="text-align: left; vertical-align: top; padding: 5px; height: 200px">
                        @if (ChosenCollection.PictureList.Count != 0 && ChosenCollection.PictureList != null)
                        {
                            <div style="font-weight: bold">
                                Note:
                            </div>
                            <div>

                                <EditForm Model="ViewCollectionController">

                                    <DataAnnotationsValidator />
                                    <ValidationSummary />

                                    <InputText style="width: 100%;padding: 20px 10px; line-height: 200%; border: none" id="myFocusedCommentInput" border:none @bind-Value="FocusedPicComment"></InputText>
                                </EditForm>

                            </div>
                        }
                    </td>
                    <td style="text-align: left; vertical-align: top; padding: 5px; height: 200px">
                        @if (ChosenCollection.PictureList.Count != 0 && ChosenCollection.PictureList != null)
                        {
                            <div style="font-weight: bold">
                                Note:
                            </div>
                            <div>
                                <EditForm Model="ViewCollectionController">

                                    <DataAnnotationsValidator />
                                    <ValidationSummary />

                                    <InputText style="width: 100%;padding: 20px 10px; line-height: 200%; border: none" id="myLatestCommentInput" @bind-Value="LatestPicComment"></InputText>
                                </EditForm>

                            </div>
                        }
                    </td>
                </table>
            </td>
        </tr>
        <tr>
            <td>
                @if (ChosenCollection.PictureList.Count != 0 && ChosenCollection.PictureList != null)
                {
                    <button class="editbtn" @onclick="FocusFocusedComment">Rediger note</button>
                    <button class="editbtn" @onclick="SaveNewFocusedComment">Gem note</button>
                    @if (FocusedCommentJustSaved)
                    {
                        <div>
                            Noten er gemt!
                        </div>
                    }
                }
            </td>
            <td>
                @if (ChosenCollection.PictureList.Count != 0 && ChosenCollection.PictureList != null)
                {
                    <button class="editbtn" @onclick="FocusLatestComment">Rediger note</button>
                    <button class="editbtn" @onclick="SaveNewLatestComment">Gem note</button>
                    @if (LatestCommentJustSaved)
                    {
                        <div>
                            Noten er gemt!
                        </div>
                    }
                }
            </td>

        </tr>

    </table>
</div>

@code {

    private CollectionDomain collection;
    private PatientDataDomain patientData;
    public string NameOfPatient { get; set; }
    public List<PictureDataDomain> PicDataList { get; set; }
    public byte[] FocusedPic { get; set; }
    public byte[] LatestPic { get; set; }
    public string FocusedPicComment { get; set; }
    public string LatestPicComment { get; set; }
    public DateTime FocusedPicDateOfUpload { get; set; }
    public DateTime LatestPicDateOfUpload { get; set; }
    public CollectionDomain ChosenCollection { get; set; }
    public string CommentInput { get; set; }
    public List<PictureInfoDomain> ReversedPicInfoList { get; set; }
    public PictureInfoDomain FocusedPicInfo { get; set; }
    public PictureInfoDomain LatestPicInfo { get; set; }
    public bool FocusedCommentJustSaved { get; set; }
    public bool LatestCommentJustSaved { get; set; }
    private Stopwatch _stopWatch;
    private Timer _stopWatchTimer;
    private ElementReference _latestCommentField;

    protected override async Task OnInitializedAsync()
    {
        #region Stubbet billeder

        //STUB!!
        //    PictureDataDomain picture1 = new PictureDataDomain();
        //    PictureDataDomain picture2 = new PictureDataDomain();
        //    PictureDataDomain picture3 = new PictureDataDomain();

        //    var filePath = @"MoleOne.jpg";

        //    byte[] picByteArray1 = ReadAllBytes(filePath);
        //    byte[] picByteArray2 = ReadAllBytes(@"MoleTwo.jpg");
        //    byte[] picByteArray3 = ReadAllBytes(@"MoleThree.jpg");

        //    picture1.PictureData = picByteArray1;
        //    picture1.PictureID = 1;
        //    picture2.PictureData = picByteArray2;
        //    picture2.PictureID = 2;
        //    picture3.PictureData = picByteArray3;
        //    picture3.PictureID = 3;

        //    PicDataList.Add(picture1);
        //    PicDataList.Add(picture1);
        //    PicDataList.Add(picture1);
        //    PicDataList.Add(picture1);
        //    PicDataList.Add(picture2);
        //    PicDataList.Add(picture2);
        //    PicDataList.Add(picture2);
        //    PicDataList.Add(picture2);
        //    PicDataList.Add(picture3);
        //    PicDataList.Add(picture3);
        //    PicDataList.Add(picture3);
        //    PicDataList.Add(picture3);

        #endregion

        PicDataList = new List<PictureDataDomain>();

        ChosenCollection = ViewCollectionController.SelectedCollection;
        if (ChosenCollection.PictureList != null && ChosenCollection.PictureList.Count != 0)
        {
            foreach (var pic in ChosenCollection.PictureList)
            {
                PicDataList.Add(ViewCollectionController.GetPictureData(pic));
            }

            FocusedPic = PicDataList[0].PictureData;
            FocusedPicDateOfUpload = ChosenCollection.PictureList[0].DateOfUpload;
            FocusedPicComment = ViewCollectionController.GetPictureComment(ChosenCollection.PictureList[0]).Comment;
            FocusedPicInfo = ChosenCollection.PictureList[0];
            PicDataList.Reverse();

            ReversedPicInfoList = ChosenCollection.PictureList;
            ReversedPicInfoList.Reverse();

            LatestPic = PicDataList[0].PictureData;
            LatestPicInfo = ReversedPicInfoList[0];
            LatestPicDateOfUpload = ReversedPicInfoList[0].DateOfUpload;
            LatestPicComment = ViewCollectionController.GetPictureComment(ReversedPicInfoList[0]).Comment;
        }

    }


    private void ShowPicture(MouseEventArgs e, int pictureId)
    {
        if (ChosenCollection.PictureList != null && ChosenCollection.PictureList.Count != 0)
        {
            FocusedPicInfo = ChosenCollection.PictureList.Find(x => x.PictureID.Equals(pictureId));
            FocusedPicDateOfUpload = FocusedPicInfo.DateOfUpload;
            FocusedPicComment = ViewCollectionController.GetPictureComment(FocusedPicInfo).Comment;
            PictureDataDomain focusedPicture = PicDataList.Find(x => x.PictureID.Equals(pictureId));

            FocusedPic = focusedPicture.PictureData;
        }
    }



    private void SaveNewFocusedComment()
    {
        if (ChosenCollection.PictureList != null && ChosenCollection.PictureList.Count != 0)
        {
            XmlDocument doc = new XmlDocument();

            var input = doc.GetElementById("myFocusedCommentInput");

            PictureCommentDomain editedComment = new PictureCommentDomain();

            editedComment.Comment = FocusedPicComment;
            editedComment.PictureID = FocusedPicInfo.PictureID;


            ViewCollectionController.PostNewPictureComment(editedComment);
            FocusedCommentJustSaved = true;
            StateHasChanged();
            _stopWatch = new Stopwatch();
            _stopWatch.Start();

            _stopWatchTimer = new Timer();
            _stopWatchTimer.Interval = 1000;
            _stopWatchTimer.Elapsed += CheckStopWatch_Timer_Tick;
            _stopWatchTimer.Enabled = true;

            LatestPicComment = ViewCollectionController.GetPictureComment(ReversedPicInfoList[0]).Comment;
        }
    }
    private void SaveNewLatestComment()
    {
        if (ChosenCollection.PictureList != null && ChosenCollection.PictureList.Count != 0)
        {
            XmlDocument doc = new XmlDocument();

            var input = doc.GetElementById("myLatestCommentInput");

            PictureCommentDomain editedComment = new PictureCommentDomain();
            editedComment.Comment = LatestPicComment;
            editedComment.PictureID = LatestPicInfo.PictureID;

            ViewCollectionController.PostNewPictureComment(editedComment);
            LatestCommentJustSaved = true;
            StateHasChanged();
            _stopWatch = new Stopwatch();
            _stopWatch.Start();

            _stopWatchTimer = new Timer();
            _stopWatchTimer.Interval = 1000;
            _stopWatchTimer.Elapsed += CheckStopWatch_Timer_Tick;
            _stopWatchTimer.Enabled = true;

            FocusedPicComment = ViewCollectionController.GetPictureComment(FocusedPicInfo).Comment;

        }
    }
    public void CheckStopWatch_Timer_Tick(object sender, EventArgs e)
    {
        if (_stopWatch.Elapsed.TotalSeconds >= 3)
        {
            InvokeAsync((() =>
            {
                FocusedCommentJustSaved = false;
                LatestCommentJustSaved = false;
                StateHasChanged();
            }));

            _stopWatch.Stop();
            _stopWatch.Reset();
            _stopWatchTimer.Enabled = false;

            FocusedPicComment = ViewCollectionController.GetPictureComment(FocusedPicInfo).Comment;
        }
    }


    public async Task FocusFocusedComment()
    {
        await JsRuntime.InvokeVoidAsync("focusInput", "myFocusedCommentInput");
    }
    public async Task FocusLatestComment()
    {
        await JsRuntime.InvokeVoidAsync("focusInput", "myLatestCommentInput");
    }

}
