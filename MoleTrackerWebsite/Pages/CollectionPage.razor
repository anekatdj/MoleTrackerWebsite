@page "/CollectionPage"

@using BusinessLogicLayer
@using BusinessLogicLayer.BusinessLogicLayerInterfaces
@using DataClasses.Domain
@using System.Drawing
@using static System.IO.File
@using System.Diagnostics
@using System.IO
@using System.Reflection.Metadata
@using System.Xml
@using System.Timers

@inject IViewCollectionController ViewCollectionController
@inject NavigationManager NavManager;

<div style="width:80%;overflow-x:scroll">
    <h4 style="font-style: oblique">
        @ChosenCollection.CollectionName
    </h4>
    <table>
        <tr>
            @if(ChosenCollection.PictureList.Count != 0)
            {
            @foreach (var item in PicDataList)
            {
                <td @onclick="@((e) => ShowPicture(e, item.PictureID))">
                    <img src="data:image;base64,@System.Convert.ToBase64String(@item.PictureData)" width="100" height="100"/>
                </td>
            }
            }
        </tr>
    </table>
</div>
<div>
    <table class="table">
        <th>@FocusedPicDateOfUpload</th>
        <th>@LatestPicDateOfUpload</th>
        <tr>
            <td style="width:50%;">
                <img style="width: 100%; " src="data:image;base64,@System.Convert.ToBase64String(FocusedPic)" />
            </td>
            <td style="width:50%">
                <img style="width: 100%; " src="data:image;base64,@System.Convert.ToBase64String(LatestPic)" />
            </td>
        </tr>
        <tr>
            <td colspan="2">
                <table id="t1" class="table2">
                    <td style="text-align: left; vertical-align: top; padding: 5px; height: 200px">
                        <div style="font-weight: bold">
                            Note:
                        </div>
                        <div>
                            <EditForm Model="ViewCollectionController">

                                <DataAnnotationsValidator />
                                <ValidationSummary />
                                @*@FocusedPicComment*@
                            <InputText id="myCommentInput" border:none @bind-Value="FocusedPicComment"></InputText>
                            </EditForm>
                        </div>
                    </td>
                    <td style="text-align: left; vertical-align: top; padding: 5px; height: 200px">
                        <div style="font-weight: bold">
                            Note:
                        </div>
                        <div>
                            @LatestPicComment
                        </div>
                    </td>
                </table>
            </td>
        </tr>
        <tr>
            <td>
                <button class="editbtn">Rediger note</button> 
                <button class="editbtn" @onclick="SaveNewComment">Gem note</button>
                @if (CommentJustSaved)
                {
                    <div>
                Noten er gemt!
                    </div>
                }
            </td>
            <td>
                <button class="editbtn">Rediger note</button>
                <button class="editbtn">Gem note</button>
            </td>
        </tr>

    </table>
</div>

@code {

    private CollectionDomain collection;
    private PatientDataDomain patientData;
    public string NameOfPatient { get; set; }
    public List<PictureDataDomain> PicDataList { get; set; }
    public byte[] FocusedPic { get; set; }
    public byte[] LatestPic { get; set; }
    public string FocusedPicComment { get; set; }
    public string LatestPicComment { get; set; }
    public DateTime FocusedPicDateOfUpload { get; set; }
    public DateTime LatestPicDateOfUpload { get; set; }
    public CollectionDomain ChosenCollection { get; set; }
    public string CommentInput { get; set; }
    public List<PictureInfoDomain> ReversedPicInfoList { get; set; }
    public PictureInfoDomain FocusedPicInfo { get; set; }
    public bool CommentJustSaved { get; set; }
    private Stopwatch _stopWatch;
    private Timer _stopWatchTimer;

    protected override async Task OnInitializedAsync()
    {
        #region Stubbet billeder

        //STUB!!
        //    PictureDataDomain picture1 = new PictureDataDomain();
        //    PictureDataDomain picture2 = new PictureDataDomain();
        //    PictureDataDomain picture3 = new PictureDataDomain();

        //    var filePath = @"MoleOne.jpg";

        //    byte[] picByteArray1 = ReadAllBytes(filePath);
        //    byte[] picByteArray2 = ReadAllBytes(@"MoleTwo.jpg");
        //    byte[] picByteArray3 = ReadAllBytes(@"MoleThree.jpg");

        //    picture1.PictureData = picByteArray1;
        //    picture1.PictureID = 1;
        //    picture2.PictureData = picByteArray2;
        //    picture2.PictureID = 2;
        //    picture3.PictureData = picByteArray3;
        //    picture3.PictureID = 3;

        //    PicDataList.Add(picture1);
        //    PicDataList.Add(picture1);
        //    PicDataList.Add(picture1);
        //    PicDataList.Add(picture1);
        //    PicDataList.Add(picture2);
        //    PicDataList.Add(picture2);
        //    PicDataList.Add(picture2);
        //    PicDataList.Add(picture2);
        //    PicDataList.Add(picture3);
        //    PicDataList.Add(picture3);
        //    PicDataList.Add(picture3);
        //    PicDataList.Add(picture3);

        #endregion

        PicDataList = new List<PictureDataDomain>();

        ChosenCollection = ViewCollectionController.SelectedCollection;

        foreach (var pic in ChosenCollection.PictureList)
        {
            PicDataList.Add(ViewCollectionController.GetPictureData(pic));
        }

        FocusedPic = PicDataList[0].PictureData;
        FocusedPicDateOfUpload = ChosenCollection.PictureList[0].DateOfUpload;
        FocusedPicComment = ViewCollectionController.GetPictureComment(ChosenCollection.PictureList[0]).Comment;

        PicDataList.Reverse();

        ReversedPicInfoList = ChosenCollection.PictureList;
        ReversedPicInfoList.Reverse();

        LatestPic = PicDataList[0].PictureData;
        LatestPicDateOfUpload = ReversedPicInfoList[0].DateOfUpload;
        LatestPicComment = ViewCollectionController.GetPictureComment(ReversedPicInfoList[0]).Comment;

        //Stub
        FocusedPicComment = "";

        CommentInput = "";

    }

    private void ShowPicture(MouseEventArgs e, int pictureId)
    {
        FocusedPicInfo = ChosenCollection.PictureList.Find(x => x.PictureID.Equals(pictureId));
        FocusedPicDateOfUpload = FocusedPicInfo.DateOfUpload;
        FocusedPicComment = ViewCollectionController.GetPictureComment(FocusedPicInfo).Comment;
        PictureDataDomain focusedPicture = PicDataList.Find(x => x.PictureID.Equals(pictureId));

        FocusedPic = focusedPicture.PictureData;
    }



    private void SaveNewComment()
    {

        XmlDocument doc = new XmlDocument();

        var input = doc.GetElementById("myCommentInput");

        PictureCommentDomain editedComment = new PictureCommentDomain();
        editedComment.Comment = FocusedPicComment;
        editedComment.PictureID = FocusedPicInfo.PictureID;

        ViewCollectionController.PostNewPictureComment(editedComment);
        CommentJustSaved = true;
        StateHasChanged();
        _stopWatch = new Stopwatch();
        _stopWatch.Start();

        _stopWatchTimer = new Timer();
        _stopWatchTimer.Interval = 1000;
        _stopWatchTimer.Elapsed += CheckStopWatch_Timer_Tick;
        _stopWatchTimer.Enabled = true;

        LatestPicComment = ViewCollectionController.GetPictureComment(ReversedPicInfoList[0]).Comment;

    }
    public void CheckStopWatch_Timer_Tick(object sender, EventArgs e)
    {
        if (_stopWatch.Elapsed.TotalSeconds >= 3)
        {
            CommentJustSaved = false;
    //CommentJustSaved = !CommentJustSaved;
            _stopWatch.Stop();
            _stopWatch.Reset();
            _stopWatchTimer.Enabled = false;

        }
    }


}
