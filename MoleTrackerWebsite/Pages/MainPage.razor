@page "/mainPage"

@using PW_BusinessLogicLayer.Interfaces
@using DataClasses.Domain
@using System.Drawing
@using System.Net.Mime
@using System.Diagnostics
@using System.Diagnostics.Eventing.Reader
@using DataClasses.Domain.Collections
@using DataClasses.Domain.Login
@using DataClasses.Domain.MISC
@using DataClasses.Domain.Picture

@inject NavigationManager NavManager
@inject SessionInfo SessionInfo
@inject PatientInfo PatientInfo
@inject Collection Collection
@inject PatientData PatientData
@inject ILogInController LogInController
@inject ICoordinatesLocalization Coordinates
@inject ICreateNewCollectionController CreateNewCollectionController
@inject IViewCollectionController ViewCollectionController
@*To find coordinates*@
@inject IJSRuntime JS;



<link href="css/CSSStyles.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" /> @*EYE*@

@if (!SessionInfo.LoggedIn)
{
    NavManager.NavigateTo("/patientLogin");
}

<h1>Velkommen, @PatientInfo.Name</h1>

<p>Her kan du sammenligne de billeder, du har taget med MoleTracker, så du nemt og hurtigt kan se efter forandringer i dine modermærker.</p>

<div class="row align-items-start">

    <div class="col">
        <div class="tabelcontainer table-hover" style="overflow-x: hidden; overflow-y: scroll; height: 400px; width: 70%">
            <table class="table table-striped table-bordered">
                <thead>
                    <tr>
                        <th>Personlige samlinger</th>
                    </tr>
                </thead>
                @if (Loading)
                {
                    <tbody style="cursor:wait">
                        @foreach (Collection collection in Collections)
                        {
                            <tr @onclick="@((e) => NavigateToCollectionPage(e, collection.CollectionID))">
                                <td>@collection.CollectionName</td>
                            </tr>
                        }
                    </tbody>
                }
                else
                {
                    <tbody style="cursor:pointer">
                        @foreach (Collection collection in Collections)
                        {
                            <tr @onclick="@((e) => NavigateToCollectionPage(e, collection.CollectionID))">
                                <td>@collection.CollectionName</td>
                            </tr>
                        }
                    </tbody>
                }
            </table>
        </div>
    </div>


    <div class="col">
        <div style="width: 70%;">
            @if (ExistingPoints)
            {

                foreach (var item in NewCoordinateXY)
                {
                    if (IsFrontFacing == item.Item3)
                    {
                        <div style="width: @(_pointRadius * 2)px; height: @(_pointRadius * 2)px; top: @(item.Item2 - _pointRadius)px; left: @(item.Item1 - _pointRadius)px; background-color: dodgerblue; position: fixed; border-radius: @(_pointRadius)px"></div>

                    }
                }
                <div>
                    <map name="patientModel">
                        @foreach (var item in CoordinateXY)
                        {
                            if (IsFrontFacing == item.Item3)
                            {
                                <area shape="circle" style="cursor: pointer;" coords="@item.Item1, @item.Item2,10" @onclick="@((e)=>NavigateToCollectionPage(e,item.Item4))" />
                            }
                        }
                    </map>
                </div>

            }


            @if (AddButtonPressed == true)
            {

                <img class="cursor" id="PatientModel" src="@FrontOrBack" style="float: right; width: @Width; height: @Height;" @onclick="GetCoordinates" />

                <div class="cursor" @onclick="GetCoordinates" style="width: @(_pointRadius * 2)px; height: @(_pointRadius * 2)px; top: @(YPoint - _pointRadius)px; left: @(XPoint - _pointRadius)px; background-color: red; position: fixed; border-radius: @(_pointRadius)px"></div>
            }
            else
            {
                <img id="PatientModel" src="@FrontOrBack" style="float: right; width: @Width; height: @Height;" @onclick="GetCoordinates" alt="usemap" usemap="#patientModel" />
            }

            <button style="float: right; font-size: 20px" class="@Arrow iconfields" @onclick="TurnAroundModel"></button>
            <button class="iconfieldsWithText" @onclick="Transform">
                Vis modermærker
                <i class="fa fa-map-pin" style="color: cornflowerblue"></i>
            </button>
        </div>
    </div>

    @*636*1431 billedstørrelse*@



</div>

<div class="col align-self-end">
    @if (AddButtonPressed == false)
    {
        <button style="float: right; margin-right: 7%; margin-top: 1%; border-radius: 28px;background:none;" class="@AddCollectionButton" @onclick="ChoosePoint"></button>
        <label style="        float: right;
        color: blue;
        margin-right: 1%;
        margin-top: 1%">Klik her for at tilføje en ny samling</label>
    }

    @if (AddButtonPressed == true)
    {
        @if (PointClicked == true)
        {
            <div class="float-container" style="float: right; margin-top: 1%;">
                <div class="float-child" style="width: 63%">
                    <p>Vælg placering af modermærke</p>
                </div>
                <div class="float-child" style="width: 24%">
                    <button style="border-radius: 28px; background: forestgreen; color: white; border: none" @onclick="AcceptPosition">Godkend</button>
                </div>
                <div class="float-child" style="width: 5%">
                    <button style="border-radius: 28px; background: crimson; color: white; border: none" @onclick="RegretNewCollection">Fortryd</button>
                </div>
            </div>
        }
        @if (PointClicked == false)
        {
            <div class="float-container" style="float: right; margin-top: 1%;">
                <div class="float-child" style="width: 63%">
                    <p>Vælg placering af modermærke</p>
                </div>
                <div class="float-child" style="width: 24%">
                    <button style="border-radius: 28px; background: forestgreen; opacity: 0.2; color: white; border: none" disabled="@true">Godkend</button>
                </div>
                <div class="float-child" style="width: 5%">
                    <button style="border-radius: 28px; background: crimson; color: white; border: none" @onclick="RegretNewCollection">Fortryd</button>
                </div>
            </div>
        }
    }


</div>

<p style="font-size: 10px; margin-top: 1%">Bemærk venligst at MoleTracker ikke diagnosticerer hudkræft. Hvis du er bekymret for et eller flere modermærker, skal du kontakte din læge.</p>





@code {

    #region Properties and fields


    private LocationOnBody.BodyPart bodyPart;
    public string FrontOrBack = "/Images/MaleFrontCrop.png";
    public string Arrow = "fa fa-refresh";
    public string AddCollectionButton = "fa fa-plus";
    public string TurnAround { get; set; }
    public string Gender { get; set; }
    public string Width { get; set; }
    public string Height { get; set; }
    public string NewPinAdded { get; set; }
    public bool AddButtonPressed { get; set; }
    public bool AcceptButtonPressed { get; set; }
    public bool PointClicked { get; set; }

    public List<Collection> Collections { get; set; }

    #endregion

    #region Turn around model and get gender
    public bool IsFrontFacing { get; set; } = true;

    public void TurnAroundModel()
    {
        GetGender();

        if (Gender == "G")
        {

            if (this.FrontOrBack == "/Images/FemaleBackCrop.png")
            {
                this.FrontOrBack = "/Images/FemaleFrontcrop.png";
                IsFrontFacing = !IsFrontFacing;

            }
            else
            {
                this.FrontOrBack = "/Images/FemaleBackCrop.png";
                IsFrontFacing = !IsFrontFacing;
            }
        }

        else if (Gender == "B")
        {
            if (this.FrontOrBack == "/Images/MaleBackCrop.png")
            {
                this.FrontOrBack = "/Images/MaleFrontCrop.png";
                IsFrontFacing = !IsFrontFacing;
            }
            else
            {
                this.FrontOrBack = "/Images/MaleBackCrop.png";
                IsFrontFacing = !IsFrontFacing;
            }
        }
    }

    public void GetGender()
    {
        //PatientInfo = LogInController.HandlePatientInfo();
        Gender = PatientInfo.Gender;
    }
    #endregion

    #region Coordinates

    private void ChoosePoint()
    {
        //NewPinAdded = "pin.png";
        AddButtonPressed = true;
    }

    private void RegretNewCollection()
    {
        AddButtonPressed = false;
    }

    //Klasse til skærmmål
    public class BoundingClientRect
    {
        public double X { get; set; }
        public double Y { get; set; }
        public double Width { get; set; }
        public double Height { get; set; }
        public double Top { get; set; }
        public double Right { get; set; }
        public double Bottom { get; set; }
        public double Left { get; set; }
    }

    public int X { get; set; }
    public int Y { get; set; }

    int _pointRadius = 2;
    public int XPoint { get; set; }
    public int YPoint { get; set; }

    public double ResultLeft { get; set; }

    private async Task GetCoordinates(MouseEventArgs e) //Før var det en void
    {
        var result = await JS.InvokeAsync<BoundingClientRect>("PictureClickFind", new object[] { "PatientModel" });
        X = Convert.ToInt32(e.ClientX - result.Left);
        Y = Convert.ToInt32(e.ClientY - result.Top);

        XPoint = (int)e.ClientX;
        YPoint = (int)e.ClientY;

        BackOrFront();
    }

    private List<Tuple<int, int, bool>> NewCoordinateXY;
    public bool ExistingPoints { get; set; }
    async Task Transform()
    {
        var result = await JS.InvokeAsync<BoundingClientRect>("PictureClickFind", new object[] { "PatientModel" });

        NewCoordinateXY = new List<Tuple<int, int, bool>>();
        foreach (var item in CoordinateXY)
        {
            NewCoordinateXY.Add(new Tuple<int, int, bool>(item.Item1 + Convert.ToInt32(result.Left), item.Item2 + Convert.ToInt32(result.Top), item.Item3));
        }
        ExistingPoints = !ExistingPoints;
    }



    private void BackOrFront()
    {
        GetGender();

        if (Gender == "G")
        {
            if (FrontOrBack == "/Images/FemaleFrontcrop.png")
            {
                HandleLocationFemaleFront();
            }
            else
            {
                HandleLocationFemaleBack();
            }
        }

        else if (Gender == "B")
        {
            if (FrontOrBack == "/Images/MaleFrontCrop.png")
            {
                HandleLocationMaleFront();
            }
            else
            {
                HandleLocationMaleBack();
            }
        }
    }

    #region Handle Location on patient
    private void HandleLocationFemaleFront()
    {
        if (AddButtonPressed == true)
        {
            PointClicked = Coordinates.LocalizePointFemaleFront(PointClicked, X, Y);
        }
    }

    private void HandleLocationFemaleBack()
    {
        if (AddButtonPressed == true)
        {
            PointClicked = Coordinates.LocalizePointFemaleBack(PointClicked, X, Y);
        }
    }

    private void HandleLocationMaleFront()
    {
        if (AddButtonPressed == true)
        {
            PointClicked = Coordinates.LocalizePointMaleFront(PointClicked, X, Y);
        }
    }

    private void HandleLocationMaleBack()
    {
        if (AddButtonPressed == true)
        {
            PointClicked = Coordinates.LocalizePointMaleBack(true, X, Y);
        }
    }
    #endregion

    private void AcceptPosition()
    {
        CreateNewCollectionController.New = true;
        Collection newCollection = new Collection()
        {
            Location = Coordinates.Location,
            CollectionName = Coordinates.Collections.CollectionName,
            PictureList = new List<PictureInfo>(),
            PatientID = PatientInfo.PatientID,
            IsMarked = false
        };
        CreateNewCollectionController.HandleCreateNewCollection(newCollection);
        NavigateToNewCollectionPage();
    }

    private bool Loading { get; set; }
    private void NavigateToCollectionPage(MouseEventArgs e, object collectionId)
    {
        Loading = true;
        var selectedCollection = PatientData.CollectionList.Where(x => x.CollectionID.Equals(collectionId)).ToList();

        if (Convert.ToInt32(collectionId) > 0)
        {
            ViewCollectionController.SelectedCollection = selectedCollection[0];
        }

        NavManager.NavigateTo("/collectionPage");
    }

    private void NavigateToNewCollectionPage()
    {
        NavManager.NavigateTo("/collectionPage");
    }


    #endregion

    #region OnStartUp


    public void DisplayPatientModel()
    {
        GetGender();

        if (Gender == "G")
        {
            FrontOrBack = "/Images/FemaleFrontcrop.png";
            Width = "212px";
            Height = "477px";
        }

        else if (Gender == "B")
        {
            FrontOrBack = "/Images/MaleFrontCrop.png";
            if (FrontOrBack == "/Images/MaleFrontCrop.png")
            {
                Width = "270px";
                Height = "520px";
            }
            Width = "276px";
            Height = "520px";
        }
    }

    Task StartupTask()
    {
        return Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {

        PatientInfo = LogInController.HandlePatientInfo();

        PatientData = ViewCollectionController.GetPatientData(PatientInfo);

        Coordinates.PatientData = PatientData;

        //ViewCollectionController.HandleSpecificPicture(17);

        Collections = PatientData.CollectionList;

        CoordinateXY = new List<Tuple<int, int, bool, int>>();

        if (PatientInfo.Gender == "B")
        {
            foreach (var item in Collections)
            {
                CoordinateXY.Add(new Tuple<int, int, bool, int>((item.Location.xCoordinate * 270 / 10000), (item.Location.yCoordinate * 520 / 10000), item.Location.IsFrontFacing, item.CollectionID));

            }
        }
        else
        {
            foreach (var item in Collections)
            {
                CoordinateXY.Add(new Tuple<int, int, bool, int>((item.Location.xCoordinate * 212 / 10000), (item.Location.yCoordinate * 477 / 10000), item.Location.IsFrontFacing, item.CollectionID));

            }
        }

        DisplayPatientModel();
        await StartupTask();

        Coordinates.ImgColorMaleBack = new Bitmap(@"wwwroot\\Images\ColorMaleFront.png");


    }

    private List<Tuple<int, int, bool, int>> CoordinateXY;


    #endregion

}

