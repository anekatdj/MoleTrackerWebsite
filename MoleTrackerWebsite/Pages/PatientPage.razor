@page "/PatientPage"
@using Microsoft.AspNetCore.Mvc.Diagnostics
@using DataClasses.Domain
@using System.Reflection.Metadata
@using System.Xml;
@using System.Xml.Linq
@using System.Xml.XPath
@using BusinessLogicLayer
@using BusinessLogicLayer.BusinessLogicLayerInterfaces

@inject ISelectPatientController SelectPatientController
@inject IViewCollectionController ViewCollectionController
@inject ICreateCollectionController CreateCollectionController
@inject PatientDataDomain PatientDataModel
@inject NavigationManager NavManager
@inject SessionInfoDomain SesInfo
@inject CoordinatesLocalization Coordinates
@inject IJSRuntime JS

@layout MainLayout

<link href="css/CSSStyles.css" rel="stylesheet" style="display:flex; justify-content: normal" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" /> @*EYE*@

<h3>@patientInfo.Name</h3>

<div class="row align-items-start" style="height: auto; width: auto">
    <div class="col">
        <div class="tabelcontainer" style="overflow: scroll; height: 500px; width: 400px">
            <EditForm Model="@PatientDataModel">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <table class="table table-striped table-bordered">
                    <tbody>
                    <tr>
                        <th>Modermærker</th>
                    </tr>
                    @foreach (var collection in SortedCollectionList)
                    {
                        <tr @onclick="@((e) => NavigateToCollectionPage(e, collection.CollectionID))" style="cursor: pointer">
                            <td>
                                @collection.CollectionName
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </EditForm>
        </div>
    </div>


    <div class="col">
        <div style="width: 400px;">
            @*<a href="/css/Pictures/pin" />*@
            @if (AddButtonPressed == true)
            {
                <img class="cursor" id="PatientModel" src="@FrontOrBack" style="float: right; width: @Width; height: @Height;" @onclick="GetCoordinates" /> @*onmousewheel = "@MouseWheel"*@
                <div class="cursor" @onclick="GetCoordinates" style="width: @(_pointRadius * 2)px; height: @(_pointRadius * 2)px; top: @(YPoint - _pointRadius)px; left: @(XPoint - _pointRadius)px; background-color: red; position: fixed; border-radius: @(_pointRadius)px"></div>
            }
            else
            {
                <img id="PatientModel" src="@FrontOrBack" style="float: right; width: @Width; height: @Height;" @onclick="GetCoordinates" /> @*onmousewheel = "@MouseWheel"*@

            }
            @if (PinOnPatientModel)
            {
                @foreach (var item in PinCollectionList)
                {
                    <div class="cursor" style="width: @(_pointRadius * 2)px; height: @(_pointRadius * 2)px; top: @(Convert.ToInt32(ScreenCoordinates.Top) + item.Location.yCoordinate - _pointRadius)px; left: @(ScreenCoordinates.Left + item.Location.xCoordinate - _pointRadius)px; background-color: red; position: fixed; border-radius: @(_pointRadius)px"></div>
                }
            }
            <button style="float: right" class="@Arrow" @onclick="TurnAroundModel"></button>
            <button style="float: right; margin-right: 2px" class="@ShowPinButton" @onclick="ShowPinOnPatientModel"></button>
        </div>
    </div>
</div>

<div class="col align-self-end">
    @if (AddButtonPressed == false)
    {
        <button style="float: right; border-radius: 28px;" class="@AddCollectionButton" @onclick="ChoosePoint"></button>
        <label style="float: right; margin-right: 1%">Klik her for at tilføje en ny samling</label>
    }

    @if (AddButtonPressed == true)
    {
        @if (PointClicked == true)
        {
            <button style="float: right; border-radius: 28px;" @onclick="AcceptPosition">Godkend</button>
            <p style="float: right; color: crimson; margin-right: 15px">Vælg placering af modermærke</p>
        }
        @if (PointClicked == false)
        {
            <button style="float: right; border-radius: 28px;" disabled="@true">Godkend</button>
            <p style="float: right; color: crimson; margin-right: 15px">Vælg placering af modermærke</p>
        }
    }



</div>



@code {

    private PatientInfoDomain patientInfo;
    public PatientDataDomain PatientData { get; set; }
    public List<CollectionDomain> CollectionList { get; set; }
    public List<CollectionDomain> SortedCollectionList { get; set; }
    public List<CollectionDomain> PinCollectionList { get; set; }
    public string NameOfPatient { get; set; }
    public List<PictureDataDomain> PicDataList { get; set; }

    //private LocationOnBodyDomain.BodyPart bodyPart;
    public string FrontOrBack = "/css/Pictures/MaleFront.png";
    public string Arrow = "fa fa-refresh";
    public string AddCollectionButton = "fa fa-plus";
    public string ShowPinButton = "fa fa-bath";
    public string TurnAround { get; set; }
    public string Gender { get; set; }
    public string Width { get; set; }
    public string Height { get; set; }
    public string NewPinAdded { get; set; }
    public bool AddButtonPressed { get; set; }
    public bool AcceptButtonPressed { get; set; }
    public bool PointClicked { get; set; }
    public int XPercentile { get; set; }
    public int YPercentile { get; set; }
    public BoundingClientRect ScreenCoordinates { get; set; }
    public bool PinOnPatientModel { get; set; }
    public bool FrontFaceing { get; set; }

    private IEnumerable<CollectionDomain> collections = new[]
    {
        new CollectionDomain() {CollectionID = 1, CollectionName = "Venstre skulder", Location = new LocationOnBodyDomain(), PictureList = new List<PictureInfoDomain>()},
        new CollectionDomain() {CollectionID = 1, CollectionName = "Højre skulder", Location = new LocationOnBodyDomain(), PictureList = new List<PictureInfoDomain>()},
        new CollectionDomain() {CollectionID = 1, CollectionName = "Venstre fod", Location = new LocationOnBodyDomain(), PictureList = new List<PictureInfoDomain>()},
        new CollectionDomain() {CollectionID = 1, CollectionName = "Højre fod", Location = new LocationOnBodyDomain(), PictureList = new List<PictureInfoDomain>()}
    };


    public void TurnAroundModel()
    {
        GetGender();



        if (Gender == "Kvinde" || SelectPatientController.BirthDataCalcFailed == true)
        {
            if (this.FrontOrBack == "/css/Pictures/FemaleBack.png")
            {
                FrontFaceing = true;
                this.FrontOrBack = "/css/Pictures/FemaleFront.png";
            }
            else
            {
                FrontFaceing = false;
                this.FrontOrBack = "/css/Pictures/FemaleBack.png";
            }
        }

        else if (Gender == "Mand")
        {
            if (this.FrontOrBack == "/css/Pictures/MaleBack.png")
            {
                FrontFaceing = true;
                this.FrontOrBack = "/css/Pictures/MaleFront.png";
            }
            else
            {
                FrontFaceing = false;
                this.FrontOrBack = "/css/Pictures/MaleBack.png";
            }
        }
        PinCollectionList = SortedCollectionList.Where(x => x.Location.IsFrontFacing.Equals(FrontFaceing)).ToList();
    }



    public void GetGender()
    {
        //PatientInfo = LogInController.HandlePatientInfo();
        //Gender = PatientInfoDomain.Gender;
        SelectPatientController.HandlePatientInfo();
        Gender = SelectPatientController.SelectedPatient.Gender;
    }

    #region Coordinates

    private void ChoosePoint()
    {
        NewPinAdded = "pin.png";
        AddButtonPressed = true;
    }

    //Klasse til skærmmål
    public class BoundingClientRect
    {
        public double X { get; set; }
        public double Y { get; set; }
        public double Width { get; set; }
        public double Height { get; set; }
        public double Top { get; set; }
        public double Right { get; set; }
        public double Bottom { get; set; }
        public double Left { get; set; }
    }

    public int X { get; set; }
    public int Y { get; set; }
    public int XPoint { get; set; }
    public int YPoint { get; set; }
    private int _pointRadius = 2;

    private async Task GetCoordinates(MouseEventArgs e) //Før var det en void
    {
        var result = await JS.InvokeAsync<BoundingClientRect>("PictureClickFind", new object[] { "PatientModel" });
        X = Convert.ToInt32(e.ClientX - result.Left);
        Y = Convert.ToInt32(e.ClientY - result.Top);

        //var scroll = await JS.InvokeAsync<int>("GetWindowYScroll");
        XPoint = (int)e.ClientX;
        YPoint = (int)e.ClientY; // + scroll

        BackOrFront();

        InPercentile();
    }

    private int XCoordinatesOnScreen(int x)
    {
        if (Gender == "Kvinde" || SelectPatientController.BirthDataCalcFailed == true)
        {
            return (x * 212 / 10000);
        }
        else if (Gender == "Mand")
        {
            return (x * 270 / 10000);
        }
        else
        {
            return 0;
        }
    }
    private int YCoordinatesOnScreen(int y)
    {
        if (Gender == "Kvinde" || SelectPatientController.BirthDataCalcFailed == true)
        {
            return (y * 477 / 10000);
        }
        else if (Gender == "Mand")
        {
            return (y * 520 / 10000);
        }
        else
        {
            return 0;
        }
    }

    private void InPercentile()
    {
        if (Gender == "Kvinde" || SelectPatientController.BirthDataCalcFailed == true)
        {
            XPercentile = (X*10000 / 212);
            YPercentile = (Y*10000 / 477);
        }
        else if (Gender == "Mand")
        {
            XPercentile = (X*10000 / 270);
            YPercentile = (Y*10000 / 520);
        }
    }

    private async Task ShowPinOnPatientModel()
    {
        ScreenCoordinates = await JS.InvokeAsync<BoundingClientRect>("PictureClickFind", new object[] { "PatientModel" });

        PinCollectionList = SortedCollectionList.Where(x => x.Location.IsFrontFacing.Equals(FrontFaceing)).ToList();

        if (PinOnPatientModel)
        {
            PinOnPatientModel = false;
        }
        else if (PinOnPatientModel == false)
        {
            PinOnPatientModel = true;
        }
    }

    private void BackOrFront()
    {
        GetGender();

        if (Gender == "Kvinde" || SelectPatientController.BirthDataCalcFailed == true)
        {
            if (FrontOrBack == "/css/Pictures/FemaleFront.png")
            {
                HandleLocationFemaleFront();
            }
            else
            {
                HandleLocationFemaleBack();
            }
        }

        else if (Gender == "Mand")
        {
            if (FrontOrBack == "/css/Pictures/MaleFront.png")
            {
                HandleLocationMaleFront();
            }
            else
            {
                HandleLocationMaleBack();
            }
        }
    }

    private void HandleLocationFemaleFront()
    {
        if (AddButtonPressed == true)
        {
            PointClicked = Coordinates.LocalizePointFemaleFront(PointClicked, X, Y);
        }
    }

    private void HandleLocationFemaleBack()
    {
        if (AddButtonPressed == true)
        {
            PointClicked = Coordinates.LocalizePointFemaleBack(PointClicked, X, Y);
        }
    }
    private void HandleLocationMaleFront()
    {
        if (AddButtonPressed == true)
        {
            PointClicked = Coordinates.LocalizePointMaleFront(PointClicked, X, Y);
        }
    }
    private void HandleLocationMaleBack()
    {
        if (AddButtonPressed == true)
        {
            PointClicked = Coordinates.LocalizePointMaleBack(PointClicked, X, Y);
        }
    }


    private void AcceptPosition()
    {
        CollectionDomain newCollectionDomain = new CollectionDomain()
        {
            Location = Coordinates.LocationOnBody,
            CollectionName = Coordinates.Collection.CollectionName,
            PictureList = new List<PictureInfoDomain>(),
            PatientID = patientInfo.PatientID,
            IsMarked = true
        };
        newCollectionDomain.Location.xCoordinate = XPercentile;
        newCollectionDomain.Location.yCoordinate = YPercentile;
        CreateCollectionController.AddNewCollection(newCollectionDomain);
        SortedCollectionList.Add(newCollectionDomain);
        AddButtonPressed = false;
    }

    private void NavigateToCollectionPage(MouseEventArgs e, object collectionId)
    {

        var selectedCollection = PatientData.CollectionList.Where(x => x.CollectionID.Equals(collectionId)).ToList();

        ViewCollectionController.SelectedCollection = selectedCollection[0];

        NavManager.NavigateTo("/CollectionPage");

    }

    #endregion

    #region OnStartUp


    public void DisplayPatientModel()
    {
        GetGender();

        if (Gender == "Kvinde" || SelectPatientController.BirthDataCalcFailed == true)
        {
            FrontOrBack = "/css/Pictures/FemaleFront.png";
            Width = "212px";
            Height = "477px";
        }

        else if (Gender == "Mand")
        {
            FrontOrBack = "/css/Pictures/MaleFront.png";
            Width = "270px";
            Height = "520px";
        }
    }

    Task StartupTask()
    {
        return Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {
        SesInfo.LoggedIn = true;
        SesInfo.UseID = 1;
        patientInfo = SelectPatientController.SelectedPatient;

        patientInfo = SelectPatientController.SelectedPatient;
        FrontFaceing = true;

        PatientData = SelectPatientController.GetPatientData(patientInfo);
        GetGender();
        CollectionList = PatientData.CollectionList;
        SortedCollectionList = new List<CollectionDomain>();
        //var sorted = from item in CollectionList orderby item.IsMarked descending select item;
        SortedCollectionList = CollectionList.Where(x => x.IsMarked.Equals(true)).ToList();
        foreach (var item in CollectionList)
        {
            if (item.IsMarked == false)
            {
                SortedCollectionList.Add(item);
            }
        }
        //foreach (var item in sorted)
        //{
        //    SortedCollectionList.Add(item);
        //}

        foreach (var item in SortedCollectionList)
        {
            item.Location.xCoordinate = XCoordinatesOnScreen(item.Location.xCoordinate);
            item.Location.yCoordinate = YCoordinatesOnScreen(item.Location.yCoordinate);
        }

        NameOfPatient = patientInfo.Name;

        DisplayPatientModel();
        await StartupTask();
        PinOnPatientModel = false;
    }

    #endregion
}