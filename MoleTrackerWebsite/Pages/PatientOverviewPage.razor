@page "/PatientOverviewPage"
@using Microsoft.AspNetCore.Mvc.Diagnostics
@using DataClasses.Domain
@using System.Reflection.Metadata
@using System.Xml;
@using System.Xml.Linq
@using System.Xml.XPath
@using BusinessLogicLayer
@using BusinessLogicLayer.BusinessLogicLayerInterfaces

@*@inject PatientDataDomain PatientData*@
@inject MedicalPracticePatientsDomain MedicalPracticePatients
@inject ISelectPatientController SelectPatientController
@inject ILoadPatientsController LoadPatientsController
@inject ILogInController LogInController
@inject NavigationManager NavManager;
@*<h3>PatientOverviewPage</h3>*@

@layout EmptyLayout

<link href="css/styles.css" rel="stylesheet"/>

<div class="wrapper fadeInDown" style="margin-top: 10%">
    <div id="formContent">
        <EditForm Model="@MedicalPracticePatients">

            <DataAnnotationsValidator />
            <ValidationSummary />
            <h2>Patientoversigt</h2>
            <InputText id="myInput" @bind-Value="SearchInput" @onkeyup="SearchFunction" placeholder="Søg efter patient" />
            <table id="patientTable" class="table table-striped">
                <tbody>
                <tr class="header">
                    <th style="width: 40%;">Navn</th>
                    <th style="width: 60%;">CPR-Nummer</th>
                </tr>
                @foreach (var item in FilteredPatientList)
                {
                    <tr @onclick="@((e) => NavigateToSpecificPatientPage(e, item.CPR))" style="cursor: pointer">
                        <td>
                            @item.Name
                        </td>
                        <td>
                            @item.CPR
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </EditForm>
    </div>
</div>


@code {

    public string SearchInput { get; set; }
    //public MedicalPracticePatientsDomain MedicalPractice { get; set; }
    public List<PatientInfoDomain> MedicalPracticePatientList { get; set; }
    public List<PatientInfoDomain> FilteredPatientList { get; set; }
    public bool IsDisabled { get; set; }

    public ILoadPatientsController LoadPatientsControllerProp { get; set; }

    public NavigationManager NavManagerProp { get; set; }

    //public string LinkToSpecifikPatientPage { get; set; }

    protected override async Task OnInitializedAsync()
    {

        LoadPatientsControllerProp = LoadPatientsController;
        NavManagerProp = NavManager;

        MedicalPracticePatientList = LoadPatientsController.LoadPatientList();

        IsDisabled = true;
        FilteredPatientList = MedicalPracticePatientList;
        SearchInput = "";
    }



    private void SearchFunction()
    {


        XmlDocument doc = new XmlDocument();

        var input = doc.GetElementById("myInput");

        //var filter = input.Value.ToUpper();


        var filter = SearchInput.ToUpper();


        FilteredPatientList = MedicalPracticePatientList.Where(x => x.CPR.Contains(filter)).ToList();

    }

    private void NavigateToSpecificPatientPage(MouseEventArgs e, string cpr)
    {
        string selectedPatientCPR = cpr;

        var selectedPatientsInfo = FilteredPatientList.Where(x => x.CPR.Equals(selectedPatientCPR)).ToList();

        SelectPatientController.SelectedPatient = new PatientInfoDomain(selectedPatientsInfo[0].CPR, selectedPatientsInfo[0].Name);


        NavManager.NavigateTo("/PatientPage");
    }

}

